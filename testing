#include "bitpack-tests.h"
#include "fmt.h"
typedef void (*Bitpack_testfun)(const char *test,
                                Bitpack_flags flags,
                                bool passed,
                                void *cl);
void Bitpack_run_tests(bool print, Bitpack_testfun test, void *cl)
{
#define FLAG(P,F) ((P) ? (Bitpack_ ## F) : 0)
#define FL(S64) (FLAG(S64, s64) | FLAG(w==0, w0) | FLAG(w==64, w64))
#define CHECK(E, S64)                                                   \
        TRY  test(#E, FL(S64), (E), cl);                                \
        ELSE test(#E " (raised exception)", FL(S64), false, cl);        \
        END_TRY
#define NCHECK(E, SE, S64)                              \
        TRY  test(Fmt_string SE, FL(S64), (E), cl);
        ELSE test(Fmt_string SE, FL(S64), false, cl);
        END_TRY
#define FITS64 (w == 64) /* fitsx causes 64-bit shift */
#define GET64  (w == 0)  /* getx  causes 64-bit shift */
#define NEW64 (FITS64 || lsb == 0 || w + lsb == 64)
#define NEW(E,F) TRY (void)(E);
\ \
                                                                \
ELSE test(#E " (raised exception)", FL(NEW64), false, cl);      \
goto F;
END_TRY;
\ \
   uint64_t new = (E)
        uint64_t words[]  = { 0U, ~0U, 0xfeedfacedeadbeef };
        unsigned widths[] = {0, 6, 8, 64};
        unsigned lsbs[]   = {16, 0, 99};  /* 99 is placeholder for 64 - lsb */
        /* all test values fit in 6 bits */
        int64_t signs[]   = { 0xfffffffffffffffe, 7, 0, 11, -8, -11 };
        uint64_t unsigns[] = { 0x33, 7, 0, 11, 1 };
/****************************************************************************/
/* The following is terrible and may melt your eyes.  You have been warned! */
/****************************************************************************/
#define NELEMS(A) (sizeof(A) / sizeof((A)[0])) /* standard macro */
        /* test all combination of word, w, lsb, both signed and unsigned */
        for (volatile unsigned i = 0; i < NELEMS(words); i++) {
                uint64_t old = words[i];
                for (volatile unsigned windex = 0;
                     windex < NELEMS(widths);
                     windex++) {
                        unsigned w = widths[windex];
                        for (volatile unsigned lindex = 0;
                             lindex < NELEMS(lsbs);
                             lindex++) {
                                volatile unsigned lsb
                                        = (lsbs[lindex] == 99) ? 64 - w
/* signed tests */
for (volatile unsigned j = 0;
     j < NELEMS(signs);
     j++) {
if ((signs[j] == 0 || w > 0)
    && w + lsb <= 64) { /* sensible only */
        NEW(Bitpack_news(old, w, lsb,
                         signs[j]),
            nexts);
        if (print) {
                printf("-- news(0x%016"
                       PRIx64
                       ", %u, %u, %4"
                       PRId64
                       " (0x%04"
                       PRIx64
                       ") == 0x%016"
                       PRIx64 "\n",
                       old, w, lsb,
                       signs[j],
                       signs[j],
                       new);
                printf("-- Recovered %"
                       PRId64
                                                      " from 0x%016"
                               PRIx64
                               " (was %"
                               PRId64")\n",
                               Bitpack_gets(new,
w, lsb),
                               new,
                               signs[j]);
                }
                /* test old parts are unchanged and new part is signs[j]
                NCHECK(Bitpack_getu(new, lsb, 0) == Bitpack_getu(old, ls
                       ("Bitpack_getu(0x%W, %d, 0) == Bitpack_getu(0x%W,
                        new, lsb, old, lsb),
                       GET64||NEW64);
                NCHECK(Bitpack_getu(new, 64 - w - lsb, w + lsb) ==
                       Bitpack_getu(old, 64 - w - lsb, w + lsb),
                       ("Bitpack_getu(0x%W, %d, %d) == Bitpack_getu(0x%W
                        new, 64 - w - lsb, w + lsb, old, 64 - w - lsb, w
                       GET64||NEW64);
                NCHECK(Bitpack_gets(new, w, lsb) == signs[j],
                       ("Bitpack_gets(0x%W, %d, %d) == %d", new, w, lsb,
                       GET64||NEW64);
        nexts: (void)0;
} }
/* unsigned tests */
for (volatile unsigned j = 0; j < NELEMS(unsigns); j++) {
        if ((unsigns[j] == 0 || w > 0) && w + lsb <= 64) {
                NEW(Bitpack_newu(old, w, lsb, unsigns[j]), nextu);
                if (print) {
                        printf("-- newu(0x%016" PRIx64 ", %u, %u, %4" PR
                               " (0x%04" PRIx64 ") == 0x%016" PRIx64 "\n
                               old, w, lsb, unsigns[j], unsigns[j], new)
                }
                /* test old parts are unchanged and new part is unsigns[
                NCHECK(Bitpack_getu(new, lsb, 0) == Bitpack_getu(old, ls
                       ("Bitpack_getu(0x%W, %d, 0) == Bitpack_getu(0x%W,
                        new, lsb, old, lsb),
                       GET64||NEW64);
                NCHECK(Bitpack_getu(new, 64 - w - lsb, w + lsb) ==
                       Bitpack_getu(old, 64 - w - lsb, w + lsb),
                       ("Bitpack_getu(0x%W, %d, %d) == Bitpack_getu(0x%W
                        new, 64 - w - lsb, w + lsb, old, 64 - w - lsb, w
                       GET64||NEW64);
                NCHECK(Bitpack_getu(new, w, lsb) == unsigns[j],
                       ("Bitpack_gets(0x%W, %d, %d) == %u", new, w, lsb,
                       GET64||NEW64);
        nextu: (void)0;
}